/**
 * @file   tio.h
 * @author Egorov N.V. <egorov@rti-mints.ru>
 * @date   Tue Jun 15 14:50:40 2010
 * 
 * @brief Основной заголовочный файл для работы с библиотекой тестовго
 * ввода-вывода.
 * 
 * 
 */

#include <stdlib.h>
#include <limits.h>
#include <float.h>

#include <tioerror.h>
#include <tioexit.h>

#ifndef _TIO_H
#define _TIO_H

#define TIOCHAR 1
#define TIODOUBLE 2
#define TIOLONG 3
#define TIOSTRING 4

/*************************
 * Состояния библиотеки  *
 *************************/

#define TIODEBUG_FLUSH 0x00001  /**< Вывод отладочных сообщений приложения */
#define TIONOEXIT      0x00002  /**< Не выходить при вызове tioExit */
#define TIODEBUG       0x00003  /**< Параметр для обработки отладочного вывода */
#define TIOFILETAR     0x00004  /**< Ключ для установки целевого файла */


/**
 *  Строковая константа для обозначения ненулевого значения параметра
 *  при возвращении параметров
 */
extern char* True;

/**
 * Строковая константав для сообщения о неутановленно параметра ключа
 */
extern char* False;


/// Максимальная длинна ключа 
#define TIOMAXKEY 512

/// Максимальная длинна имени параметра 
#define TIOMAXPARAM 512




typedef long tio_status;        /**< Тип данных для Кодирования
                                   состояний системы */


/**
 * Функция описания требуемых приложению параметров.
 *
 * При описании параметров использется нотация сходная с натацией
 * записи параметров при вызове функции getopt.
 *
 * В качестве ключа разрешено использовать любую последовательность
 * начинающаюся с буквы или цифры содержащие в своем теле буквы, цифры
 * и знак минус, и отличающуюся от строк "help", "version" и любых
 * строк начинающихся с "tio-". При этом символы минус в начале ключа
 * и двоеточие в его конце несут служебную информацию и
 * интерпретиуются. Символ двоеточия ':' в конце названия ключа
 * интерпретируется как то что после ключа ДОЛЖЕН следовать
 * параметр. Отсутвие аргумента полсле такого ключа вызовет аварийное
 * завершение программы.  Символ '-' перед имененем ключа состоящего
 * из одной буквы означает что этот ключ длинный (начинается с двух
 * знаков - а не с одного).
 *
 * В качестве имени параметра разрешается использовать любую
 * символьную из букв цифр, символов почеркивания и знака минус строку
 * длинной до 126 символов.
 *
 * Поле Description должно содержать текстовое пояснения назначения
 * данной переменной. Это пояснение бубдет передано пользователю при
 * вызове программы с ключом help
 * 
 */
typedef struct _tio_param 
{
  char* key;                    /**< Ключ передавааемый для описания
                                   парметра */
  char* name;                   /**< Имя параметра, по которому он
                                   будет запрошен у библиотеки */
  char* description;            /**< Текстовое описание параметра (
                                   его назначения ) */
} tio_param;

extern tio_param TIOPARAMNULL;   /**< Структура для указания на конец
                                    массива структур типа данных tio_param */




/**
 * Список аргументов не обработаных в процессе инициализации
 * библиотеки.
 * 
 */
extern char *tio_argv[];


/** 
 * Получение текущей версии библиотеки как номер текущего в системе
 * контроля версий.
 * 
 * 
 * @return номер версии
 */
long tioGetVersion(void );


/** 
 * Получение строки собержащей версию библиотеки
 * 
 * Данная функция предназначена для получения версии и должна заменить
 * собой tioGetVersion, как более простая в применении
 * 
 * @return Указатель на строку которая не должна изменяться в приложении.
 */
char* tioGetVersionString(void );


/** 
 * Функция установки внутреннего состояния библиотеки. Функция
 * принимает в качестве параметра код состоняния. При получении
 * изменяет текущее внутренее состояние библиотеки. В качестве
 * значения возвращает новое состояние библиотеки. В случае если некии
 * состояния являются взаимоисключающими переходит в последнее 
 * 
 * @param Status 
 * 
 * @see tioGetError
 *
 * @return 1 - если библиотека полсле вызова перешла в закодированное
 * параметром состояние, 0 - если вышла из указанного состояния,
 * отрицательное значения в случае ошибки.
 */
int tioSetStatus(tio_status Status);


/** 
 * Функция получения информации о текущем состоянии библиотеки.
 * Возвращаетединицу в случае если библиотека находится в состоянии
 * закодированном в Status, ноль в случае если библиотека не
 * находиться в этом состоянии и отрицательное значение в случае
 * ошибки.
 * 
 */
int tioGetStatus(tio_status Status);

/** 
 * Функция инициализации работы с библиотекой. Производит установку
 * внутрених переменных и состояний в соответствии с переданными
 * аргументами командной сторки, формирует сообщение о помощи если
 * предан параметр --help и сообщении о номере версии в случае
 * передачи параметра --version. Функция производит рабор параметров
 * для дальнейшего использования функций tioGet* и tioGetDef*. Функция
 * не возвращает управления до окончания разбора параметров. Все
 * неразобранные параметры ( параметры не являющиеся ключами )
 * могут быть полученны через переменную окружения tio_argv.
 * 
 * @param version Строка содержащая информацию о версии запукаемого
 * приложения.
 *
 * @param help Краткое описание программы. 
 *
 * @param param Массив структур описания параметров, завершащийся
 * структурой TIOPARAMNULL
 *
 * @param argc Число параметров
 *
 * @param argv Массив параметров.
 * 
 * @return О в случае успешного ззавершения и ненулевое значение в
 * противном случае
 *
 * @see tio_param
 */
int tioInit(const char* version, const char* help,
            const tio_param param[], const int argc, const char* argv[] );

/** 
 * Функция получения параметра в форме строки.
 * 
 * Возвращает переданную с параметром связанным с name строкку,
 * копируя ее в буфер buff. В случае если длинна строкового
 * представления параметра больше длинны буфера копируется лишь
 * buff_len - 1 символов и добавляется завершающий ноль. В этом случае
 * функция возвращает код ошибки TENES. 
 *
 * @param name Имя запрошенного параметра.
 * @param buff Буфер для размещения строки.
 * @param buff_len Полная длинна строки буфера.
 * 
 * @return 0 в случае успешного выполнения и код ошибки в противном
 * случае.
 */
int tioGetS(const char* name, char* buff, const size_t buff_len);

/** 
 * Функция получения параметра в форме строки с значением по умолчанию.
 * 
 * Возвращает переданную с параметром связанным с name строкку,
 * копируя ее в буфер buff. В случае если длинна строкового
 * представления параметра больше длинны буфера копируется лишь
 * buff_len - 1 символов и добавляется завершающий ноль. В этом случае
 * функция возвращает код ошибки TENES. Если парметр не может быть
 * возвращен по той или иной причине возвращается значение по
 * умолчанию ( адресуемое параметром default ). При этом возвращается
 * код ошибки. Код ошибки возвращается во всех случаях, за исключением
 * случаякогда длинна буфера меньше длинна сроки значения по
 * умолчанию. В таком случае возвращается код ошибки TENES.
 *
 * @param name Имя запрошенного параметра.
 *
 * @param Default параметр возвращаемый в качестве значения по умолчанию.
 *
 * @param buff Буфер для размещения строки.
 *
 * @param buff_len Полная длинна строки буфера.
 * 
 * @return 0 в случае успешного выполнения и код ошибки в противном
 * случае.
 */
int tioGetDefS(const char* name, const char* Default, char* buff, const size_t buff_len);


/** 
 * Функция получения параметра с приведением его к типу данных long
 *
 * Функция возвращает значения параметра которые расположены в
 * променжутке значений от LONG_MIN до LONG_MAX-1. В случае если
 * такого параметра нет, или значения параметра не находятся в
 * указанном промежутке, или не могут быть приведены к типу данных
 * long, возвращается сообщение об ошибке. Код ошибки в этом случае
 * может быть получен с помощью функции tioGetError(). 
 *
 * @param name  Имя параметра 
 * 
 * @return полученное значение в случае успешного выполнения или
 * значение LONG_MAX в случае ошибки.
 */
long tioGetL(const char* name);


/** 
 * Функция получения параметра с приведением его к типу данных long
 *
 * Функция возвращает значения параметра которые расположены в
 * променжутке значений от LONG_MIN+1 до LONG_MAX-1. В случае если
 * такого параметра нет, или значения параметра не находятся в
 * указанном промежутке, или не могут быть приведены к типу данных
 * long, возвращается значение default. Код ошибки или подтверждение
 * успешного выполнения может быть получен с помощью функции
 * tioGetError().
 *
 * @param name  Имя параметра 
 *
 * @param Default Значение по умолчанию возвращаемое в случае ошибки 
 *
 * @return полученное значение в случае успешного выполнения или
 * значение default в случае ошибки.
 */
long tioGetDefL(const char* name, const long Default);


/** 
 * Функция получения параметра в виде одного символа
 * 
 * Функция возвращает параметр символ переданный после параметра с
 * указанным именем. Если в качестве параметра передан не один символ
 * а строка возникает ошибка. Как и при любой другой ошибке функция в
 * этом случае возвращает значение UCHAR_MAX. 
 * 
 * @param name имя параметра
 * 
 * @return Символ в случае успеха, UCHAR_MAX при ошибке.
 */
unsigned char tioGetC(const char* name);

/** 
 * Функция получения параметра в виде одного символа
 * 
 * Функция возвращает параметр символ переданный после параметра с
 * указанным именем. Если в качестве параметра передан не один символ
 * а строка возникает ошибка. Как и при любой другой ошибке функция в
 * этом случае возвращает значение default. 
 * 
 * @param name имя параметра
 * 
 * @param Default значение возвращаемое при ошибке
 *
 * @return Символ в случае успеха, default при ошибке.
 */
unsigned char tioGetDefC(const char* name, const unsigned char Default);

/** 
 * Функция получения запрошенного параметра в форме числа с плавуещей точки.
 *
 * Значение числа может быь любым допустимым для переменной в формате
 * double, за исключением значения DBL_MAX. Значение DBL_MAXслужит
 * признаком ошибки при получении параметра. При получении такого
 * значения, причину возникновения ошибки можно получить вызовом
 * tioGetError().
 * 
 * @param name Имя запашиваемого параметра.
 * 
 * @return Значение параметра в случае успеха или значение DBL_MAX при
 * возникновении ошибки.
 */
double tioGetD(const char* name);

/** 
 * Функция полчуения параметра в форме числа с плавующей точкой, со
 * значением по умолчанию.
 *
 * Значение числа может быть любым допустимым для переменной в формате 
 * double, за исключение значений DBL_MAX
 *
 * Функция возвращает значение числа с плавующей точкой в формате
 * double, в случае возможности такого представления запрошенного
 * параметра, и значение default при возникновении ошибки.
 * 
 * @param name  Имя запрашиваемого параметра.
 *
 * @param Default  Значение используемое при возникновении ошщибки
 * 
 * @return Значение параметрапереданного программе при успешном
 * завершении и значение default при возникновении ошибки.
 */
double tioGetDefD(const char* name, const double Default);

/**
 * Функция отвечает за инициализацию таблицы и назначение ей заголовков.
 * Также в данной функции определяются типы данных передаваемых
 * в последующем аргументов.
 * 
 * @param format Cтрока, содержащая имена
 * заголовков. Имена заголовков пишутся слитно и разделены знаком "&".
 * В случае если знак "&" встречается в имени заголовка следует использовать
 * сочетание "&&".
 * 
 * @param ... Второй и последующие аргументы - коды типов данных.
 *
 * Существующие коды:
 * '1' - char
 * '2' - double
 * '3' - long
 * '4' - string
 *
 * @return В случае успешного выполнения функция возращает указатель на void*,
 * по которому размещаются данные инициализации
 * таблицы. В противнов случае NULL.
 */
extern void* tioTableBegin( const char *format, ... );

/**
 * Функция отвечает за ввод данных в таблицу (один вызов функции добавляет в
 * таблицу одну строку).
 * 
 * @param td Указатель, возращаемый функцией
 * tioTableBegin.
 * 
 * @param ... Данные,
 * которые нужно занести в очередную строку таблицы.
 *
 * @return В случае успешного выполнения функция возращает указатель на void*,
 * по которому размещаются данные таблицы. В противнов случае NULL.
 */
extern void* tioTableRecord( void *td, ... );

/** 
 * Функция отвечает за вывод таблицы.
 * 
 * @param td Указатель, возращаемый функцией
 * tioTableRecord.
 *
 * @return 0 в случае успешного завершения. 1 в случае ошибки.
 */
extern int   tioTableEnd( void *td );

/** 
 * Передает в поток ошибок текст message.
 *
 * 
 * @param content Строка предназнаенная для вывода
 * 
 * @return 0 при успешном завершении и код ошибки в противном случае
 */
int tioError( const char *content);

/**
 * Функция передаёт в поток ошибок текст с параметрами
 *
 * @param format Строка для вывода
 *
 * @return 0 при успешном завершении и код ошибки в противном случае
 */
int tioErrorF( const char* format, ... );

/**
 * Функция строчного вывода
 *
 * @param   message Строка сообщения для вывода
 *
 * @return  0       При успешном завершении и код ошибки в противном случае
 *
 */
int tioPrint( const char* message );


/** 
 * Функция форматированного строчного вывода
 * 
 * @param template Шаблон сообщения
 * 
 * @return 0 при успешном завершении и код ошибки в противном случае
 */
int tioPtintF( const char* template, ... );

/** 
 * \brief Аварийное завершение приложения с возвращением кода ошибки.
 * 
 * Функция выводит сообщение об ошибке адресованное параметром msg в
 * потоу ошибок и завершает приложение со статусом status. При этом
 * статус завершениядолжен быть ненулевым ( то есть статусом
 * какой-нибудь действительной ошибки ) в пративном случае статусу
 * завершения будет присвоен код невыполнения предварительных условий
 * теста.
 * 
 * @param status Статус завершения приложения (TOFAIL, TOTESTNOTSTART)
 * @param msg Сообщение размещаемое в потоке ошибок
 * 
 * @return Не возвращает управления вызывающей функции.
 */
int tioDie(int status, const char* msg);

/// Макрос для аварийного завершения
#define tioDIE() tioDie(0, NULL)


/** 
 * Функция вывода отладочной информации
 * 
 * Данная функция исполняется только если приложению через командную
 * строку передан параметр --tio-debug. Если такой параметр не передан
 * приложению то программа тутже возвращает управление вывзвающему
 * приложению не производя никаких действий с переданным сообщением.
 *
 * @param message Текст сообщения.
 * 
 * @return 0 при успешном завершении и код ошибки в противном случае.
 */
int tioDebug(const char* message); 

/** 
 * Функция вывода отладочной информации
 * 
 * Данная функция исполняется только если приложению через командную
 * строку передан параметр --tio-debug. Если такой параметр не передан
 * приложению то программа тутже возвращает управление вывзвающему
 * приложению не производя никаких действий с переданным сообщением.
 * 
 * @param template Шаблон в соотвестсвии с котором принимаются
 * параметры.
 * 
 * @return 0 при успешном завершении и код ошибки в противном случае.
 */
int tioDebugF(const char* template,... ); 


/** 
 * Функция вывода текстового предупреждения
 * 
 * @param message Текс тпредупреждения.
 * 
 * @return 0 при успешном завершении и код ошибки в противном случае.
 */
int tioWarning(const char* message);

/** 
 * Функция вывода форматированного текстового предупреждения
 * 
 * @param format форматированная строка вывода
 * 
 * @return 0 при успешном завершении и код ошибки в противном случае.
 */
int tioWarningF(const char* format, ... );

#endif //_TIO_H
