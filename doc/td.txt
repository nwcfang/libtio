Техническое описание (черновик )                                               <date>

		  БИБЛИОТЕКА ВВОДА ВЫВОДА ДЛЯ ТЕСТОВ

  Библиотека предназначается для унификации процесса получения
 парамеров, вывода резльтатов и сообщений о аварийном завершении
 тестов.

ВВЕДЕНИЕ

Билблиотека условно может быть разделена на 6 частей:
    1. Функции настройки поведения библиотеки
    2. Функции чтения параметров
    3. Функции вывода результатов
    4. Функции прерывания программы с фиксацией в выводе.
    5. Сообщения об ошибках
    6. Служебные функции

СОГЛАШЕНИЕ О ИМЕНОВАНИИ

  Все фуцнкции предназначенные для экспорта из библиотеки должны
начинаться с префикса tio за которым следует имя функции начинающее с
прописной буквы. Все переменные и типы данных начинаются с tio_.

СОСТОЯНИЯ БИБЛИОТЕКИ

  Библиотека сходна по своей структуре с конечным автоматом. Ее
состоянием можно управлять при помощи изменения переменных состояния.
функцция tioSetStat(tio_status Status) установки состояния библиотеки
принимает в качестве параметра код состояния, а возвращает текущее
состоняние. В случае если состояние установлено возвращается 1. 0
возвращается если состояние не установлено. При ошибке возвращается
отриуательное значение. Значение кода ошибки в библиотеки можно
получить при помощи вызова tioGetError. Для получения значения
состояния используется функция tioGetStatus(tio_status Status), она
возвращает текущее состояни, подобно функции tioSetStatus.

ФУНКЦИЯ long tioGetVersion(void)
Функция возвращает число содержащее текущую версию библиотеки.


ПОТОКИ ВЫВОДА 

  В библиотеке определяется 4 потока вывода, предназначенных для
регистрации ошибок, предупреждений, отчетов о работе и отладочной
информации. Основынм потоком ввыода считается поток отчетов о работе.
Для работы с каждым из потоков предназначено свое семейство функций. 
Описание семейств функций приводится ниже.

  Все потоки за исключением потока ошибок и потока отлавдочной
информации являбтся буферизуемыми. Поток отладочной информации
является небуферизуемым в одном из двух случаев: протраммист установил
лаг состояния библиотеки TIODEBUG_FLUSH или если пользователь передал
приложению ключа --tio-debug-flush. Следует отметить что установка
флага TIODEBUG_FLUSH не будет иметь никакого эфекта если во время
запуска приложения ему не передан ключ --tio-debug.

МЕХАНИЗМ ВОЗВРАТА ОШИБОК
   
  Все экспортируемы функции обязательно возвращают значения.

  Фукции которые могут не возвращать значений возвращают
целочисленное значение соответствующее коду возврата из функции.

  Функции возвращающие указател возвращают значение NULL в случае
ошики. Код ошибки может быть проверен при помощи вызова функции
tioGetError.

  Функции возращающие числовые значения в случае возникновения ошибки
возвращают максимальнодопустимое значение своего возвращаемого
параметра. Код ошибки ДОЛЖЕН быть получен при помощи вызова функции
tioGetError. Функции возвращающие символы так-же относятся к числовым,
однако считаются беззнаковыми.

  Все функции, за исключением функции инициализации и функций аврийного
завершения, должны вернуть управление основному потоку программы.

ФОРМАТИРОВАНИЕ СТРОКИ ВЫВОДА

Все функции для форматирования строки вывода используют формат широко
применяемый в системных функция.Последовательности символов
начинающихся с символа % и продалжающихся символами из приведенной
далее таблицы:

	 +--------+----------------------------------------+
	 | Символ |Описание типа                           |
	 +--------+----------------------------------------+
	 |c       |Символ ( char )                         |
	 +--------+----------------------------------------+
	 |d | i   |Целое число в десятичной форма ( long ) |
	 +--------+----------------------------------------+
	 |e       |Число с мантистой для чисел с плавующей |
	 |        |запятой ( double )                      |
	 +--------+----------------------------------------+
	 |f       |Число с плавующей точкой ( double )     |
	 +--------+----------------------------------------+
	 |o       |Целое число в восьмеричном представлении|
	 |        |( long )                                |
	 +--------+----------------------------------------+
	 |s       |Строка заверщающаяся нулем ( char* )    |
	 +--------+----------------------------------------+
	 |x       |Беззнаковое шеснадцатиричное            |
	 |        |представления ( long )                  |
	 +--------+----------------------------------------+
	 |X       |Беззнаковое шеснадцатиричное            |
	 |        |представления с буквами в верхнем       |
	 |        |регистре ( long )                       |
	 +--------+----------------------------------------+

Для вывода символа % используется последовательность %%.


ФУНКЦИИ ИНИЦИАЛИЗАЦИИ БИБЛИОТЕКИ 

  Основной функцией инициализации библиотеки является функция tioInit.
До вызова функции может быть осуществленн лишт вызов функций
tioGetVersion( описание этой функций приводятся далее ). Помиммо
инициализации данная функция осуществляет не только инициализацию
библиотекино и разбор параметров. Функция принимает как "длинные" так
и "короткие" параметры. Все параметры ключи которых содержат больше
одного символа, за исключением символа двоиточия на конце являются
короткими, все прочие длинные. Ключ из одного символа так-же может
быть длинным ( см далее ).

int tioInit(const char* version, const char* help, 
    	       const tio_param _param[], int argc, char *argv[]);

  Функция tioInit осуществляет первоначальную инициализацию библиотеки и
списка параметров доступных приложению. Функция принимает 5 параметров:
   1. версия теста
   2. короткое описание назначения теста
   3. список параметров принимаемх приложением и тех ключей для
   парметрв что используются в данном приложении. Признаком конца
   списка параметров является структура tio_param у которой все поля
   имеют нулевое значений.
   4. количество аргументов командной строки
   5. список аргументов командной строки

tio_param представляет собой структуру вида:

typedef struct _tio_param
{
	char *key; 
	char *name;
	char* description;
} tio_param;

  Где key ключ используемый при вызове из командной строки, name - имя
параметра используемое при взаимодействии приложения с библиотекой а
description - котороткое описание предназначение параметра.

  В качестве имени параметра разрешается использовать любую символьную
из букв цифр, символов почеркивания и знака минус строку длинной до
126 символов.

  В качестве ключа разрешено использовать любую последовательность
начинающаюся с буквы или цифры содержащие в своем теле буквы, цифры и
знак минус, и отличающуюся от строк "help", "version" и любых строк
начинающихся с "tio-". При этом символы минус в начале ключа и
двоеточие в его конце несут служебную информацию и интерпретиуются.

 Символ двоеточия ':' в конце названия ключа интерпретируется как то
что после ключа ДОЛЖЕН следовать параметр. Отсутвие аргумента полсле
такого ключа вызовет аварийное завершение программы.

  Символ '-' перед имененем ключа состоящего из одной буквы означает
что этот ключ длинный (начинается с двух знаков - а не с одного).

 Функция осуществляет разбор параметров и записывает их во внутренем
представлении библиотеки.  Передача всех параметров которые не связаны
с каким либо из ключей осуществляется через переменную окружения
tio_argv. Эта переменная после вызова функции tioInit равняется NULL в
случае если нет ни одного параметра который несвязан с ключом , или
списку строк переданных в командной строке, в противном случае. Все
строки из этой переменной не могут быть изменены.

ПОЛУЧЕНИЕ ПАРАМЕТРОВ

  Для получения параметров используется семейство функций вида tioGet*
и tioGetDef*. Эти функции предназначены для получения параметров по их
имени. функции оканчиваются на суфикс, означающий возвращаемое
значение: L - long,  D - double,  C - char,  S - char* ( string ).
Коды ошибок: 

  +---------+------------------------------------------------------+
  |TESUC    |  успешное завершение ( 0 )                           |
  +---------+------------------------------------------------------+
  |TENOPAR  |  параметр не зарегестрирован при инициализации       |
  |         |  библиотеки                                          |
  +---------+------------------------------------------------------+
  |TEINCTYPE|  Параметр не может быть приведен к запрошенному типу |
  +---------+------------------------------------------------------+
  |TENOTSET |  параметр не передан при вызове приложения.          |
  +---------+------------------------------------------------------+
  |TENES    |  размер буфера недостаточно велик для помещения      |
  |         |  параметра                                           |
  +---------+------------------------------------------------------+
  |TEFAILL  |  Отказ по непонятным причинам                        |
  +---------+------------------------------------------------------+



  ФУНКЦИИ tioGetS И tioGetDefS

int tioGetS(const char* name, char* buff, const size_t buff_len);
int tioGetDefS(const char* name, const char* default, char* buff,
                        const size_t buff_len);

  Функции создают копию параметра который был связан с именем из строки
адресующуемую как name в буфере buff. Если в буфере не достаточно
места функция возвращает значение TENES. 

  При возникновении любой из ошибок функция tioGetS заносит в буфер buff
заносится строка из одного нулевого символа.

  Функция tioGetDefS всегда заносит в буфер значение. В случае если
такой параметр не может быть получен то это значение default, в
остальных случаях это значение полученное от пользователя. Если длинны
буфера не достает, то используется лишь начальные символы, однако в
поток предупреждений выводится сообщение о невозможности передать
параметр программе целиком. Функция при этом возвращает TENES.

При передачим нулевого указателя в качестве буфера функция возвращает
значение TENES и выводит предупреждение о передачи нулевого буфера в
поток предупреждений.

В случае успешного выполнения, функция возвращает значение TESUC.

  ФУНКЦИИ tioGetL И tioGetDefL

long tioGetL(const char* name);
long tioGetDefL(const char* name, const long default);

Функции возвращают целое число, переданное в программу с параметром
name. 

Функция tioGetL в случае ошибки возвращает LONG_MAX. Код ошибки может
быть получен при помощи вызова tioGetError. Возможные ошибки: TENOTSET
и TEINCTYPE.

Функция tioGetDefL в случае невозможности вернуть значение переданное
пользователем возвращает значение default.

  ФУНКЦИИ tioGetC И tioGetDefC

unsigned char tioGetC(const char* name);
unsigned char tioGetDefC(const char* name, const unsigned char default);

Функции возвращают целое число, переданное в программу с параметром
name. 

Функция tioGetC в случае ошибки возвращает UCHAR_MAX. Код ошибки может
быть получен при помощи вызова tioGetError. Возможные ошибки: TENOTSET
и TEINCTYPE.

Функция tioGetDefC в случае невозможности вернуть значение переданное
пользователем возвращает значение default.

  ФУНКЦИИ tioGetD И tioGetDefD

double tioGetD(const char* name);
double tioGetDefD(const char* name, const double default);

Функции возвращают число с плавующей запятой, переданное в программу с
параметром name.

Функция tioGetD в случае ошибки возвращает DBL_MAX. Код ошибки может
быть получен при помощи вызова tioGetError. Возможные ошибки: TENOTSET
и TEINCTYPE.

Функция tioGetDefD в случае невозможности вернуть значение переданное
пользователем возвращает значение default.

ФУНКЦИИ РАБОТЫ С ОШИБКАМИ

Для работы с ошибками предусмотрен набор функций обеспечивающий как
фиксацию ошибок в потоке ошибок, так и аварийное завершение приложения
со сбрасыванием всех логов и выходом с сообщением об ошибке.

Функции tioError и tioErrorF предназначены для вывода сообщения об
ошибке в поток ошибок. Их прототипы:

int tioError(const char* message);
int tioErrorF(const char* format, ... );

Функция tioError передает в поток ошибок текст message.

Функция tioErrorF передает в поток ошибок форматированный в
соответстии со строкой format и остальными параметрами. О
форматировании строк смотри выше.

Функция tioDie предназначена для аварийного завершения работы
библиотеки. Эта функция закрывает все открытые структуры и таблицы (
см. далее ), делает запись в поток ошибок о причине завершения,
сбрасывает все буфера ввода-вывода, и завершает приложение с кодом
ошибки.

void tioDie(int status, const char* message);

Данная функция никогда не возвращает управление после своего вызова.

В случае если в качестве значения status предан ноль, то код
возвращаемы приложением будет -1.  Параметр message может быть равен
NULL.

ФУНКЦИИ ОТЛАДКИ И ПОТОКА ПРЕДУПРЕЖДЕНИЙ

  Для работы с потоком отладки и потоком предупреждений предусмотрено
по две функции, схожие с теми что используются при работе с потоком
ошибок.

int tioDebug(const char* message); 
int tioDebugF(const char* template,... ); 

  Функции предназначены для отладочного вывода. Эти функции в
большенстве случае не осуществляют никакого вывода или действий, пока
не будет разрешен вывод этой информации с помощью ключа --tio-debug

  Отличительной чертой данного вывода является отсутствие буферизации
на нем.

Дополнительная информация о формате шаблонов смотри выше в разделе
Форматирование вывода.

Для работы с потоком предупреждений предусметренны так-же две функции.

int tioWarning(const char* message);
int tioWarningF(const char* format, ... );

  Функции размещают строку message или форматированную строку format в
потоке предупреждений.

ФУНКЦИИ ВЫВОДА

Функции вывода делятся на три типа: функции строчного вывода, функции
структурированного вывода и функции вывода таблиц.

Функции строчного вывода представленыдвумя функциями:

int tioPrint(const char* messge);
int tioPrintF(const char* template, ... );

  Функции размещают в потоке вывода собщени message или форматирования
собщение по шаблону template.

Функции табличного вывода

Функции табличного вывода предназначены для вывода информации
структура полей которой может бытьчетко описана по числу полей.

Для работой с табличной формой представления определено следующее
семейство функций:

int tioTableBegin(const char* format, ... )
int tioTableEnd();
int tioTableRecord(int num; ... );

Первая из функций отвечает за инициализацию таблицы и назначение ей
заголовков. Также именно в данной функции определяются типы данных
передаваемых в последующем аргументов. Следует отметить, что в этой
функции описание формата отличается от того формата который применен в
других функция вывода. Для инициализации таблицы мы передаем список
имен таблиц разделенных знаком амперсанда (&). В случае необходимости
вставить в название символ амперсанда необходимо ввести два амперсанда
подрят. В список переменных параметров заносятся типы данных
переменных либо предопределенные ( TIOLONG, TIOCHAR, TIODOUBLE,
TIOSTRING ), либо полученные при создании списков (см. далее).

В текущей версии запрещается повторный вызов tioTableBegin до вызова
tioTableEnd. Однако между вызовами tioTable* разрешен вызов любых
других функций библиотеки.

Содержимое таблицы размещается в потоке вывода лишь в момент вызова
tioTableEnd.


СТРУКТУРИРОВАННЫЙ ВЫВОД

Под структурированным выводом понимается вывод данных для каждого из
начений которых может быть определено некое имя. 

Процесс вывода структурированных данных состоит из этапа определекния
структурнированных данных, определения представления структурированных
данных, и вывода структур.

Для определения структуры используется функция tioStructDefine:

int tioStructDefine(const char* template, ... );
Данная структура принимает в качестве пораметров шаблон имен полей
структуры и типы данных структур. Описание типов полей совпадает с
описание названий столбцов для таблицы, а параметры описываются также
как параметры для таблицы. 

В случае своего успешного выполнения функция возвращает положительный
номер с кодом структуры. В случае провала фунцкия возвращает
отрицательное значение. Код ошибки можно получить при помощи вызова
функции tioGetError. Функция может сообщать следующими сообщениями:

             +-----------+------------------------------+
             |TESUC      | Успешное выполнение функции  |
             +-----------+------------------------------+
             |TENOFREEID | Нет свободного идентификатора|
             +-----------+------------------------------+
             |TEINVAL    | Неверные параметры функции   |
             +-----------+------------------------------+
             |TEFAIL     | Отказ по непонятным причинам |
             +-----------+------------------------------+


Код возращаемый функций присваевается этой структуре. В дальнейшем он
будет использоваться в качестве идентификатора структуры.

После определения самой структуры пользователь может определить
строковое представление данного типа структур. Если представление не
будет определено, то библиотека сама определит представление исходя из
имен структуры.

Представление задается из строки форматирования, которая помимо текста
включает обозночения полей структуры в виде \1, \2, и.т.д. или в виде
\имя_поля_структуры где все пробелы из имени поля заменены символами
подчеркивания.

Функция возвращает целое число, равное нулю при удачном завершении и
коду ошибки в противном случае.

Прототип функции:

int tioStrucView(const int StructID, const char* format);

где StructID идентификатор структуры полученный от tioStructDefine.


Функцией для вывода структурированных данных является функция

int tioStructPrint(int StructID,...);

Которая принимакет в качестве параметров идентификатор структуры и
список аргументов - полей структуры.
